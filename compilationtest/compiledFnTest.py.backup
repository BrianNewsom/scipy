
print "Testing if compilation of functions in nquad will speed up the execution of the integration"

from timetest import *


timeTest('oneD', '[[-1,1]]', "3")
'''
print "X+2 evaluated from -1, 1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "    One dimensional integral, function in python"
print integrate.nquad(oneDPython, [[-1,1]])
print timeit.timeit('integrate.nquad(oneDPython, [[-1,1]])','from __main__ import oneDPython ; from scipy import integrate', number=1)
#print fn1()
#print timeit.timeit("fn1()", "from __main__ import fn1")
print "    One dimensional integral, function in fortran"
#print integrate.nquad(comp.onedcompiled, [[-1,1]])
#print timeit.timeit("fn2()", "from __main__ import fn2")
'''
timeTest("twoD", "[[-200, -0.5], [-1,1]]")
'''
print ""
print "X^2 + Y^2 evaluated from x = -200, -0.5, y = -1,1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "Python"
print "Solution = "
print integrate.nquad(twoDPython, [[-200, -0.5], [-1,1]])
print "Time = "
print timeit.timeit('integrate.nquad(twoDPython, [[-200,-0.5],[-1,1]])', 'from scipy import integrate ; from __main__ import twoDPython', number=1)
print "Fortran"
print "Solution = "
print integrate.nquad(comp.twodcompiled, [[-200, -0.5], [-1,1]])
print "Time = "
print timeit.timeit('integrate.nquad(comp.twodcompiled, [[-200, -0.5], [-1,1]])', 'from scipy import integrate ; import comp', number=1)
'''

timeTest("threeD", "[[-19,87],[0,1],[0,3.14]]")
'''
print ""
print "12*X^7 * Y^2 * sin(2*Z) evaluated from x = -19, 87 y = 0, 1 and z = 0, 3.14"
print "    Three dimensional integral function in python"
print integrate.nquad(threeDPython, [[-19,87],[0,1],[0,3.14]])
print "    Three dimensional integral function in fortran"
print integrate.nquad(comp.threedcompiled, [[-19,87],[0,1],[0,3.14]])
'''

#timeTest("fourD", "[[0,1],[-1,1],[.13,.8],[-.15,1]]") timetest does not yet support functions with extra arguments

print ""
print "Example function from nquad documentation~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
print "Python"
print "Solution = "
print integrate.nquad(fourDPython, [[0,1], [-1,1], [.13,.8], [-.15,1]],opts=[opts0,{},{},{}])
print "Time = "
print timeit.timeit('integrate.nquad(fourDPython, [[0,1], [-1,1], [.13,.8], [-.15,1]],opts=[opts0,{},{},{}])', 'from scipy import integrate ; from __main__ import fourDPython ; from __main__ import opts0', number=1)
print "Fortran"
print "Solution = "
print integrate.nquad(comp.fourdcompiled, [[0,1], [-1,1], [.13,.8], [-.15,1]],opts=[opts0,{},{},{}]) #The fortran function actually stores a temp value instead of the if else statement in python.  This may use more space computationally or be slightly slower.  I'm not sure if theres another way I can write it.
print "Time = "
print timeit.timeit('integrate.nquad(comp.fourdcompiled, [[0,1],[-1,1],[.13,.8], [-.15,1]],opts=[opts0, {},{},{}])', 'from scipy import integrate ; import comp ; from __main__ import opts0', number=1)

print ""


timeTest("fiveD", "[[-19,12],[10,11],[-1,4],[0,6],[9,0]]")

timeTest("threeDOsc", "[[-2.5,2.5],[1,6], [0,2]]", "1000")
